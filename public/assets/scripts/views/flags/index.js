define(["marionette", "datatables", "moment"], function(){
  var flagsIndex = Backbone.Marionette.ItemView.extend({

    template: "#js-flags-index-tmpl",
    // className: "overlay",
    id: "js-main",

    ui: {
      showUser: ".js-view-flag-info"
    },

    events: {
      "click @ui.showFlag"  : "show"
    },

    collectionEvents: {
      "change": "updateDataTable",
      "reset": "updateDataTable",
      "sync": "makeDataTable"
    },

    onShow: function(){
      this.makeDataTable();
    },

    makeDataTable: function(event) {
      if(this.dataTable){
        this.updateDataTable();
        return;
      }

      if(this.collection.length > 0){
        var table = $('#sample_1');
        /* Table tools samples: https://www.datatables.net/release-datatables/extras/TableTools/ */

        /* Set tabletools buttons and button container */


        this.dataTable = table.dataTable({

            // Internationalisation. For more info refer to http://datatables.net/manual/i18n
            "language": {
                "aria": {
                    "sortAscending": ": activate to sort column ascending",
                    "sortDescending": ": activate to sort column descending"
                },
                "emptyTable": "No data available in table",
                "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                "infoEmpty": "No entries found",
                "infoFiltered": "(filtered1 from _MAX_ total entries)",
                "lengthMenu": "Show _MENU_ entries",
                "search": "Search:",
                "zeroRecords": "No matching records found"
            },

            "order": [
                [4, 'desc']
            ],

            "lengthMenu": [
                [5, 15, 20, -1],
                [5, 15, 20, "All"] // change per page values here
            ],
            // set the initial value
            "pageLength": 10,

            "dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

            // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
            // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
            // So when dropdowns used the scrollable div should be removed.
            //"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

            "tableTools": {
                "sSwfPath": "../../assets/global/plugins/datatables/extensions/TableTools/swf/copy_csv_xls_pdf.swf",
                "aButtons": [{
                    "sExtends": "pdf",
                    "sButtonText": "PDF"
                }, {
                    "sExtends": "csv",
                    "sButtonText": "CSV"
                }, {
                    "sExtends": "xls",
                    "sButtonText": "Excel"
                }, {
                    "sExtends": "print",
                    "sButtonText": "Print",
                    "sInfo": 'Please press "CTR+P" to print or "ESC" to quit',
                    "sMessage": "Generated by DataTables"
                }]
            },
            "data": this.collection.convertForDataTable(),
            "columns": [
            { title: "ID", data: "id"},
            { title: "User", data: "user_email", render:function(data){
                if(data.length > 30){
                  return data.substr(0,28) + "..";
                }else{
                  return data;
                }
              }
            },
            { title: "Reporter", data: "reporter_email", render:function(data){
                if(data.length > 30){
                  return data.substr(0,28) + "..";
                }else{
                  return data;
                }
              }
            },
            { title: "Item", data: "item"},
            { title: "Reason", data: "reason"},

            { title: "Created At",
              render: function(data){
                return moment(data).format("MM/DD/YY hh:mm A");
              },
              iDataSort: 5,
              data: "created_at"
            },
            { mDataProp: "created_at",
              bVisible: false
            },
            { title: "Actions",
              render: function(data){
                return '<a href="#user/' + data + '/flags" class="btn btn-xs default js-view-user-info"><i class="fa fa-search"></i> View</a>';
              },
              data: "user_id"
            }
        ]
        });
      }
    },
    updateDataTable: function(){
      this.dataTable.fnClearTable();
      oSettings = this.dataTable.fnSettings();

      var newData = this.collection.convertForDataTable();
      for (var i=0; i<newData.length; i++)
      {
        this.dataTable.oApi._fnAddData(oSettings, newData[i]);
      }
      this.dataTable.fnDraw();
    }
  });

  return flagsIndex;
});